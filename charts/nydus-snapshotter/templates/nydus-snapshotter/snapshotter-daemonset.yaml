apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "nydus-snapshotter.fullname" . }}
  labels:
    app: {{ template "nydus-snapshotter.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: "{{ .Values.name }}"
  annotations:
    {{- if .Values.daemonsetAnnotations }}
{{ toYaml .Values.daemonsetAnnotations | indent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "nydus-snapshotter.fullname" . }}
      component: "{{ .Values.name }}"
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nydus-snapshotter.fullname" . }}
        component: "{{ .Values.name }}"
        release: {{ .Release.Name }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{template "nydus-snapshotter.fullname" . }}-sa
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      hostPID: {{ .Values.hostPid }}
      {{- if .Values.hostNetwork }}
      dnsPolicy: "ClusterFirstWithHostNet"
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}

      {{- if quote .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if and (.Capabilities.APIVersions.Has "scheduling.k8s.io/v1beta1") (.Values.priorityClassName) }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.image.pullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 8 }}
      {{- end }}
      containers:
      - name: nydus-snapshotter
        image: {{ template "nydus-snapshotter.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ENABLE_NYDUS_OVERLAY
          value: "false"
        resources:
{{ toYaml .Values.resources | indent 12 }}
        {{- if .Values.containerRuntime.containerd.enable }}
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                
                # sandbox/pause image have to be fetched again, because the required image layers are not present in the containerd image store.
                # check this for more detail: https://github.com/dragonflyoss/nydus/wiki/FAQ#q-cant-start-nydus-pod-in-k8s-error-failed-to-get[â€¦]rom-content-store-content-digest-sha256-not-found
                nsenter -t 1 -m ctr -n k8s.io content fetch --user AWS:$(nsenter -t 1 -m aws ecr get-login-password --region us-east-1) {{ .Values.containerRuntime.containerd.pauseImage }}

                # currently, without host pid in container, we can not nsenter with pid and can not invoke systemctl correctly.
                nsenter -t 1 -m systemctl -- restart containerd.service
                
          preStop:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                # Recover the containerd config file from bak file.
                etcContainerd={{ .Values.containerRuntime.containerd.configFile }}
                mv -f ${etcContainerd}.bak ${etcContainerd}
        {{- end }}
        {{- if .Values.args }}
        args:
{{ toYaml .Values.args | indent 12 }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: "/etc/nydus/"
        - name: nydus-lib
          mountPath: "/var/lib/containerd-nydus"
          mountPropagation: Bidirectional
        - name: nydus-run
          mountPath: "/run/containerd-nydus"
          mountPropagation: Bidirectional
        - name: fuse
          mountPath: "/dev/fuse"
        - name: containerd-conf
          mountPath: {{ .Values.containerRuntime.containerd.configDir }}
        - name: containerd-data
          mountPath: /var/lib/containerd  # Mount the containerd data directory
          mountPropagation: Bidirectional
        

        securityContext:
          privileged: true

      initContainers:
      {{- if .Values.containerRuntime.containerd.enable }}
      - name: update-containerd
        image: {{ template "nydus-snapshotter.initContainer.image" . }}
        imagePullPolicy: {{ .Values.containerRuntime.initContainer.image.pullPolicy }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - |

          etcContainerd={{ .Values.containerRuntime.containerd.configFile }}
          
          # make a bak file of containerd config file. When the helm chart is uninstalled, the bak file will be restored.
          cp ${etcContainerd} ${etcContainerd}.bak
          if [ $? -ne 0 ]; then
              echo "Failed to copy ${etcContainerd} to ${etcContainerd}.bak"
              exit 1
          fi
          
          toml check $etcContainerd proxy_plugins.nydus
          if [ $? -eq 0 ]; then
            echo "nydus snapshotter has already configured."
            exit 0
          fi

          toml set --overwrite $etcContainerd plugins.\"io.containerd.grpc.v1.cri\".containerd.discard_unpacked_layers false
          toml set --overwrite $etcContainerd plugins.\"io.containerd.grpc.v1.cri\".containerd.disable_snapshot_annotations false
          toml set --overwrite $etcContainerd plugins.\"io.containerd.grpc.v1.cri\".containerd.snapshotter "nydus" 
  
          # toml command not support to set block, so just use cat command.
          cat << EOF >> $etcContainerd
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc-nydus]
            runtime_type = "io.containerd.runc.v2"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc-nydus.options]
              snapshotter = "nydus"
          [proxy_plugins]
            [proxy_plugins.nydus]
              type = "snapshot"
              address = "/run/containerd-nydus/containerd-nydus-grpc.sock"
          EOF

        volumeMounts:
        - name: containerd-conf
          mountPath: {{ .Values.containerRuntime.containerd.configDir }}
      {{- end }}

      volumes:
      - name: config
        configMap:
          name: {{ template "nydus-snapshotter.fullname" . }}
      - name: nydus-run
        hostPath:
          path: /run/containerd-nydus
          type: DirectoryOrCreate
      - name: nydus-lib
        hostPath:
          path: /var/lib/containerd-nydus
          type: DirectoryOrCreate
      - name: fuse
        hostPath:
          path: /dev/fuse
      {{- if .Values.containerRuntime.containerd.enable }}
      - name: containerd-conf
        hostPath:
          path: {{ .Values.containerRuntime.containerd.configDir }}
      {{- end }}
      - name: containerd-data
        hostPath:
          path: /var/lib/containerd  
